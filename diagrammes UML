@startuml

' Diagramme de Classe
class Utilisateur {
  +id: int
  +pseudo: string
  +email: string
  +motDePasse: string
  +credit: int
}

class Chauffeur extends Utilisateur {
  +immatriculation: string
  +vehicules: List<Vehicule>
  +preferences: List<string>
}

class Passager extends Utilisateur {}

class Vehicule {
  +id: int
  +modele: string
  +marque: string
  +energie: string
}

class Covoiturage {
  +id: int
  +chauffeur: Chauffeur
  +depart: string
  +arrivee: string
  +dateHeure: DateTime
  +placesDisponibles: int
  +prix: float
  +ecologique: boolean
}

Utilisateur "1" -- "*" Covoiturage : participe
Chauffeur "1" -- "*" Covoiturage : propose
Chauffeur "1" -- "*" Vehicule : possède

@enduml

@startuml

' Diagramme de Cas d'Utilisation
actor Visiteur
actor Utilisateur
actor Employe
actor Administrateur

Visiteur --> (Consulter covoiturages)
Visiteur --> (Créer un compte)
Utilisateur --> (Réserver un covoiturage)
Utilisateur --> (Proposer un covoiturage)
Employe --> (Valider les avis)
Administrateur --> (Gérer utilisateurs et employés)
Administrateur --> (Voir statistiques)

@enduml

@startuml

' Diagramme de Séquence: Réservation d'un covoiturage
participant Utilisateur
participant "Système" as System
participant Chauffeur

Utilisateur -> System: Recherche un trajet
System -> Chauffeur: Vérifie disponibilité
Chauffeur -> System: Retourne disponibilité
System -> Utilisateur: Affiche trajets disponibles
Utilisateur -> System: Sélectionne un trajet
System -> Chauffeur: Notifie réservation
System -> Utilisateur: Confirme réservation

@enduml
